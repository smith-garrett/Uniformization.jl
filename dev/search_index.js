var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Uniformization","category":"page"},{"location":"#Uniformization","page":"Home","title":"Uniformization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Uniformization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Uniformization]","category":"page"},{"location":"#Uniformization.erlangization","page":"Home","title":"Uniformization.erlangization","text":"erlangization(Q, k=2^10, t=0.0)\n\nApproximate 𝐑(t) = exp(t𝐐) using P₃ of Yoon & Shanthikumar (1989, p. 179), originally from Ross (1987), where the Rᵢⱼ are the probability of starting at state 𝑗 and ending at state 𝑖 at time 𝑡. The k parameter should be set to a power of two for efficiency.\n\n\n\n\n\n","category":"function"},{"location":"#Uniformization.make_dtmc","page":"Home","title":"Uniformization.make_dtmc","text":"make_dtmc(Q, λ=2^10)\n\nConvert a transition rate matrix 𝐐 for a continuous-time Markov chain to a transition probability matrix 𝐏 for the corresponding discrete-time Markov chain.\n\n\n\n\n\n","category":"function"},{"location":"#Uniformization.make_dtmc!","page":"Home","title":"Uniformization.make_dtmc!","text":"make_dtmc!(Q, λ=2^10)\n\nConvert a transition rate matrix 𝐐 for a continuous-time Markov chain to a transition probability matrix 𝐏 for the corresponding discrete-time Markov chain, in place.\n\n\n\n\n\n","category":"function"},{"location":"#Uniformization.standard_uniformization","page":"Home","title":"Uniformization.standard_uniformization","text":"standard_uniformization(Q, k=2^10, t=0.0)\n\nApproximate 𝐑(t) = exp(t𝐐) using standard uniformization, where the Rᵢⱼ are the probability of starting at state 𝑗 and ending at state 𝑖 at time 𝑡. The upper bound of the truncation is determined automatically on the fly. Matrix powers are calculated incrementally. Still much less efficient than discreteobservationtimes and erlangization.\n\n\n\n\n\n","category":"function"},{"location":"#Uniformization.stationary_distribution-Tuple{Any}","page":"Home","title":"Uniformization.stationary_distribution","text":"stationary_distribution(Q)\n\nCalculate the stationary distribution of a full transition rate matrix 𝐐 by solving 𝐐𝐱 = 0.\n\n\n\n\n\n","category":"method"},{"location":"#Uniformization.stationary_distribution-Tuple{TransientRateMatrix}","page":"Home","title":"Uniformization.stationary_distribution","text":"stationary_distribution(Q::TransientRateMatrix)\n\nReturn the stationary distribution of Q, which is a vector of zeros for transient rate matrices.\n\n\n\n\n\n","category":"method"},{"location":"#Uniformization.uniformize","page":"Home","title":"Uniformization.uniformize","text":"uniformize(Q::FullRateMatrix, p0, k=2^10, t=0.0,\n           method::Function=erlangization, args...)\n\nApproximate 𝐩(t) = exp(t𝐐)𝐩(0) using uniformization. The parameter k controls the rate of transitions occurring in the approximated process. Higher k leads to a better approximation. Returns a (normalized) distribution over the states at time 𝑡.\n\n\n\n\n\n","category":"function"},{"location":"#Uniformization.uniformize-2","page":"Home","title":"Uniformization.uniformize","text":"uniformize(Q::TransientRateMatrix, p0, k=2^10, t=0.0,\n           method::Function=erlangization, args...)\n\nApproximate 𝐩(t) = exp(t𝐐)𝐩(0) using uniformization. The parameter k controls the rate of transitions occurring in the approximated process. Higher k leads to a better approximation. Returns a non-normalized distribution over the states at time 𝑡.\n\n\n\n\n\n","category":"function"}]
}
